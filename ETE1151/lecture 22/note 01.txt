Pointers allow us to pass data as reference (vs. by value)

Pointers can be used to create dynamic data structures such as linked-lists, queues, stacks ad trees

queue is a first in first out of data structure (form a line in example)

stacks is a last in first out (stack of dishes)

A pointer contains the memory address of a variable (note that variable has a value)

referencing a value through a pointer is called indirection

When declaring pointers you have to use * before each pointer variable. Each pointer variable name shoud end with Ptr.

// declare integer variable count 
int counter;

// declare  pointer to an integer
int *countPtr;

read from right to left: countPtr is a pointer to an integer

// declare a pointer to a double 
double *xPtr;

// declare 2 double pointers
double *xPtr, *yPtr;

Address operator & is a unary operator that obtains the memory address of its operand

int count = 10;
int count2 = 20;
int *countPtr; 

countPtr = &count; 	// countPtr holds the memory address of count 
countPtr = &count2;	// now countPtr holds the memory address of count2 

count variable is at memory address 0x20000, value 10 is stored in this location
countPtr variable is at memory address 0x30000, value 0x20000 is stored in that location 

A pointer should be initialized when they are declared or in an assignment statement 

A pointer maybe initialized to 0 (NULL) or an address of corresponding type

A pointer with the value of 0 or NULL pints to nothing and it is known as the null pointer

The value of 0 in the only integer value that can be assigned directly to a pointer variable 

// can I do the following: NO 
countPtr = 10;

int y = 5;
int *yPtr = &y;

// print content of y
cout << y;

// print content of yPtr
cout << yPtr;	// will print address in hexedecimal format

yPtr points to y which has a value of 5. To print the content of y we use * operator

cout << *yPtr; 	// it will print 5 

The * operator is referred to as an indirection operator or dereferencing operator  

C++ compiler will not allow you to dereference an uninitialized pointer variable 


int *zPtr;

cout << *zPtr; 		// Cannot use this because zPtr is not initialized 

cout << zPtr; 		// Can use this because it is just the memory address where zPtr is located 

Your program will 'crash' (will get exception) if you dereference a null pointer. A fata execution time error will occur.

C++ compiler will not allow you to dereference a non-pointer
// following is not allowed 
cout << *y;