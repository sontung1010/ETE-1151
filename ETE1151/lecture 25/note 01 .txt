Storage of data in memory is temporary
Files are used for data persistence - permanent retention of data

=== we know now how to write to file 
=== we also know how to read from a file

Data Hierarchy in the computer 

Bit - smallest data item in computer
1 or 0

Byte is composed of 8 bits. Each character is represented by a pattern of 1s and 0s

01001010 	Byte	(ASCII character J)
0x4A	0x means this number is a hexadecimal number 

Field (field is composed of characters, convey some meaning) 
Judy

Record (made of several related fields). record can be represented as a class in C++
Judy Green 

File (made of several records)
Sally Black 
Tom Blue 
Judy Green

Most business use many different files to store data. A group of related data files are stored in a data base 

C++ views each file as a sequence of bytes
Each file ends either with an end of file marker or at specified byte umber recorded in operating system data structure

A file containing n characters
0th character, first, 2, 3 ,4, n-1th, end of file marker

When a file is opened, an object is created and a stream is associated with that object.

Objects cin, cout, cerr and clog are created when <iostream> is included

When dealing with files we need to include <fstream>

Writing output file 
ofstream outFile("text.txt", <mode>);

<mode>: 	ios::out 	Existing data in the file is deleted if the file "text.txt" exists. If "text.txt" does not exist then it creates the file

ios::app 	append data to end of file. The existing file what it had will be there but new data will be written to the end of it 

Other modes of operation for reading data 
ifstream inFile("text.txt", ios::in);

ios::in 	open a file for input

ios::binary 	open a file for binary (nontext)

================================================================
To retrieve data sequentially from a file, programs start reading from the beginning of the file and read all the data consecutively until desired data is
found.

It may be necessary to process the file several times 

Both istream and ostream provide functions for repositioning pointer
use seekg for istream
use seekp for ostream

inFile.seekg(0, <mode>)

second argument <mode>
ios::beg 	(defaut) if second argument is not tere this is assumed position relative to the beginnning of the file 

ios::cur 	position is relative to the current position 

ios::end 	position is relative to the end of stream

test.txt
123 ab 78.00
456 cd 1.98

inFile.seekg(0, ios::beg)

with this pointer is looking at 1

inFile.seekg(1, ios::beg)
with this pointer is looking at 2

inFile.seekg(0, ios::end)
pointer is looking at last character of the file which is 8

inFile.seekg(-1, ios::end)
pointer is looking at 9

Let's assume the pointer is looking at a
inFile.seekg(1, ios::cur)
pointer is looking at b

inFile.seekg(-2, ios::curr)
pointer is looking at 3

========================
while (!inFile.eof()) { 	// while end of file have not been reached
// read data from a file
}

// here you have end of file 

to reset eof use the following command

inFile.clear();

// what does the following do?
inFile.seekg(0); 	// reposition to beginning of file 

===================================

char ch;
ch = cin.get(); 	// read one character from input stream

outFile.put(ch); 	// write one character into output stream

outFile.flush();	// data from memory is written into the file 

pos = outFile.tellp();




























