Most programs perform arithmetic calculations

* multiply 
+ add
- subtract
/ divide

% modulus operator (give remainder of two integer number when they are divided)

4 % 3 	gives us 1 
5 % 2 	gives us 1
7 % 4 	gives us 3 

let's say variable num varies from 0 to 25999 we want to print value of num every 1000th 

if ((num % 1000) == 0)
	cout << num << "\n";


sample output: 

0
1000
2000
3000
...
25000

int num1 = 7;
int num2 = 4;
int ans = num1 / num2; 


since this is integer division and the result is an integer
ans = 1

double ans2 = num1 / num2; 
ans2 = 1 	(it did integer division and stored 1.0 into ans2)

double ans3 = (double)num1 / (double)num2;
ans3 = 1.75

=========================================================
Precedence of arithmetic operations

highest precedence is (). These will be evaluated first  parenthesis within parenthesis, the inner parenthesis gets evaluated first. 

*, /, % evaluated second. If there are several of these they are evaluated  from left to right. 

+, - evaluated third 

y = 2 * 5 * 5 + 3 * 5 + 7;
y = 10 * 5 + 3 * 5 + 7;
y = 50 + 3 * 5 + 7; 
y = 50 + 15 + 7;
y = 65 + 7;
y = 72 

=======================================================
What is wrong with the following statement? 

if (num >= 30)
	cout << "num is greater than equal to 30\n"; 

No space is allowed between > and = sign

========================================================
An algorithm 

is a procedure for solving a problem in terms of actions to execute and which order to execute

Pseducode
English like statement (between english and actual c++ code) 

All programs can be written in terms of different structures

1) sequence structure - several statements gets executed one right after the other 

2) selection structure
if 			perform an action if condition is true
if else			perform action1 if condition is true otherwise perform action2
switch perform 		perform one of many different actions

3) repetition structure 

while (condition) {
	action1
	action2
	...	
	actionn
}

As long as condition is true action1...actionn gets executed.

body of the code gets execute 0 or more times 

do {
	action1
	action2
	...
	actionn
} while (condition) 

body of the code gets execute 1 or more times 

for (body if the loop gets executes 0 or more times) 
