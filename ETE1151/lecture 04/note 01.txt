	char x;
	x = 'A';
	printf("%c\n", x);
variable x is declared for type char 
format %c, it prints value of x as to be printed in the format of a character

printf("%c %d\n", x, x);

Here x is printed to the screen in character format and decimal integer

1 character is 1 byte. 1 byte is 8 bits. each bit is 0 or 1.

==========================================
there are 2 floating types (real number representation), these are used to manipulate real numbers. 
Floating point numbers: constants such as 1.069, 0.003

float 	(single precision) 	ocupies 4 bytes in the memory
double 	(double precision)	ocupies 8 bytes in the memory 

For floating value, we an control the precision as well as the field length.
The precision is the number of decimal digits printed to the right of decimal point.

%m.nf
m=field length
n=precision

%mf only field length is specified.
%.nf only precision is specified.


Double precision real numbers 
double x; 

%m.nlf  	(use lf instead of f)

============================================
reading data from keyboard using scanf_s() 

The format string (first argument in scanf_s) correspond to various ways the character in the input stream are to be interpretted. 
After the format string the other arguments are addressed.
int x;
scanf_s("%d", &x);

The symbol & represents the address operator 

%d causes the input characters to be interpreted as a decimal integer and causes the resulting value to stored at address of x.


x is stored at address 0x2000 the user type 1200
what is the address of x? = what is &x? 
0x2000

What is the content of x? 
1200

See scanf example 03 

control string: contains conversion specifications or formats
A conversion specification begins with % and end with conversion character 
%d	decimal integer
%f	floating number
%e  	floating (scientific notation)
%g 	floating (it uses e or f which is convenient)
%c 	single character 
%s 	string 

printf("%s %d %f %c%c\n", "one", 2, 3.3, 'G', 'O');
